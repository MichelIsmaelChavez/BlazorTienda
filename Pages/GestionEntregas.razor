@page "/gestion-entregas"
@using BlazorTienda.Models
@using BlazorTienda.Services
@inject EntregaService EntregaService
@inject DeliveryService DeliveryService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using System.Text.Json

<div class="container-fluid px-4 py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="text-primary fw-bold mb-0">
            <i class="bi bi-truck me-2"></i>Gestión de Entregas
        </h3>
        <div class="badge bg-primary rounded-pill fs-6">
            @entregas.Count entregas
        </div>
    </div>

    @if (entregas.Any())
    {
        <div class="card border-0 shadow-sm rounded-4 overflow-hidden mb-4">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead style="background-color: #007bff; color: white;">
                        <tr>
                            <th>ID</th>
                            <th>Cliente</th>
                            <th>Tipo</th>
                            <th>Productos</th>
                            <th>Dirección</th>
                            <th>Delivery</th>
                            <th>Estado</th>
                            <th>Total</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entrega in entregas)
                        {
                            <tr>
                                <td class="fw-semibold">#@entrega.Id</td>
                                <td>
                                    <div class="fw-semibold">@entrega.ClienteNombre</div>
                                    <small class="text-muted">@entrega.ClienteEmail</small>
                                </td>
                                <td>
                                    <span class="badge @(entrega.TipoEntrega == "Domicilio" ? "bg-info" : "bg-warning text-dark")">
                                        @entrega.TipoEntrega
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary"
                                            @onclick="() => ShowProductos(entrega.Productos)">
                                        <i class="bi bi-list-ul"></i> Ver (@entrega.Productos.Count)
                                    </button>
                                </td>
                                <td>@entrega.DireccionEntrega</td>
                                <td>
                                    <select class="form-select form-select-sm"
                                            @onchange="async e => await AsignarDelivery(entrega, int.Parse(e.Value.ToString()))">
                                        <option value="0" disabled selected>-- Seleccionar --</option>
                                        @foreach (var delivery in deliverys.Where(d => d.Estado == "Disponible" || d.Id == entrega.DeliveryId))
                                        {
                                            <option value="@delivery.Id" selected="@(entrega.DeliveryId == delivery.Id)">
                                                @delivery.Nombre (@delivery.Estado)
                                            </option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <div class="delivery-progress">
                                        <div class="progress-step @(entrega.EstadoEntrega == "Pendiente" ? "active" : "") @(entrega.EstadoEntrega != "Pendiente" ? "completed" : "")">
                                            <div class="step-number">1</div>
                                            <div class="step-name">Pendiente</div>
                                        </div>
                                        <div class="progress-connector @(entrega.EstadoEntrega != "Pendiente" ? "active" : "")"></div>
                                        <div class="progress-step @(entrega.EstadoEntrega == "En preparación" ? "active" : "") @(entrega.EstadoEntrega == "En camino" || entrega.EstadoEntrega == "Entregado" ? "completed" : "")">
                                            <div class="step-number">2</div>
                                            <div class="step-name">Preparación</div>
                                        </div>
                                        <div class="progress-connector @(entrega.EstadoEntrega == "En camino" || entrega.EstadoEntrega == "Entregado" ? "active" : "")"></div>
                                        <div class="progress-step @(entrega.EstadoEntrega == "En camino" ? "active" : "") @(entrega.EstadoEntrega == "Entregado" ? "completed" : "")">
                                            <div class="step-number">3</div>
                                            <div class="step-name">En camino</div>
                                        </div>
                                        <div class="progress-connector @(entrega.EstadoEntrega == "Entregado" ? "active" : "")"></div>
                                        <div class="progress-step @(entrega.EstadoEntrega == "Entregado" ? "active" : "")">
                                            <div class="step-number">4</div>
                                            <div class="step-name">Entregado</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="fw-bold">Bs. @entrega.Total.ToString("N2")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="async () => await EliminarEntrega(entrega.Id)"
                                            title="Eliminar entrega">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5 my-5">
            <div class="bg-light rounded-circle d-inline-flex p-4 mb-3">
                <i class="bi bi-truck display-4 text-muted"></i>
            </div>
            <h3 class="mt-3 fw-semibold">No hay entregas registradas</h3>
            <p class="text-muted mb-4">Los pedidos realizados por clientes aparecerán aquí</p>
        </div>
    }
</div>

@if (mostrarProductos)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Productos del pedido</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => mostrarProductos = false"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Imagen</th>
                                    <th>Producto</th>
                                    <th>Precio</th>
                                    <th>Cantidad</th>
                                    <th>Subtotal</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var producto in productosModal)
                                {
                                    <tr>
                                        <td>
                                            <img src="@producto.ImagenUrl"
                                                 alt="@producto.Nombre"
                                                 style="width: 50px; height: 50px; object-fit: cover;"
                                                 class="rounded-3 shadow-sm" />
                                        </td>
                                        <td>
                                            <div class="fw-semibold">@producto.Nombre</div>
                                            <small class="text-muted">@producto.Descripcion</small>
                                            @if (producto.EnOferta)
                                            {
                                                <span class="badge bg-danger ms-2">Oferta</span>
                                            }
                                        </td>
                                        <td>Bs. @producto.PrecioUnitario.ToString("N2")</td>
                                        <td>@producto.Cantidad</td>
                                        <td class="fw-bold">Bs. @((producto.PrecioUnitario * producto.Cantidad).ToString("N2"))</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => mostrarProductos = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Entrega> entregas = new();
    private List<Delivery> deliverys = new();
    private List<ProductoEntrega> productosModal = new();
    private bool mostrarProductos = false;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        entregas = await EntregaService.ObtenerTodasAsync();
        deliverys = await DeliveryService.ObtenerTodosAsync();

        // Guardar en localStorage
        await JS.InvokeVoidAsync("localStorage.setItem", "entregas", JsonSerializer.Serialize(entregas));
        StateHasChanged();
    }

    private async Task AsignarDelivery(Entrega entrega, int deliveryId)
    {
        if (deliveryId == 0 || isProcessing) return;

        isProcessing = true;

        try
        {
            await JS.InvokeVoidAsync("blazorHelpers.showToast", "info", "Proceso iniciado",
                                   $"Asignando delivery a entrega #{entrega.Id}");

            if (entrega.DeliveryId > 0)
            {
                var deliveryAnterior = deliverys.FirstOrDefault(d => d.Id == entrega.DeliveryId);
                if (deliveryAnterior != null)
                {
                    deliveryAnterior.Estado = "Disponible";
                    await DeliveryService.ActualizarAsync(deliveryAnterior);
                }
            }

            var deliveryNuevo = deliverys.FirstOrDefault(d => d.Id == deliveryId);
            if (deliveryNuevo != null)
            {
                entrega.DeliveryId = deliveryId;
                entrega.DeliveryEmail = deliveryNuevo.Correo;

                deliveryNuevo.Estado = "Ocupado";
                await DeliveryService.ActualizarAsync(deliveryNuevo);
                await EntregaService.ActualizarAsync(entrega);

                // ✅ Actualizar localStorage
                var todas = await EntregaService.ObtenerTodasAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "entregas", JsonSerializer.Serialize(todas));

                await JS.InvokeVoidAsync("Swal.fire", new
                {
                    icon = "success",
                    title = "Entrega asignada",
                    text = $"El delivery {deliveryNuevo.Nombre} ha sido asignado exitosamente a la entrega #{entrega.Id}.",
                    confirmButtonColor = "#3085d6"
                });
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("blazorHelpers.showToast", "danger", "Error",
                                   $"Ocurrió un error: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            await CargarDatos();
        }
    }

    private async Task AvanzarEstado(Entrega entrega)
    {
        switch (entrega.EstadoEntrega)
        {
            case "Pendiente":
                entrega.EstadoEntrega = "En preparación";
                break;
            case "En preparación":
                entrega.EstadoEntrega = "En camino";
                break;
            case "En camino":
                entrega.EstadoEntrega = "Entregado";
                break;
            case "Entregado":
                return;
        }

        await EntregaService.ActualizarAsync(entrega);

        if (entrega.EstadoEntrega == "Entregado" && entrega.DeliveryId > 0)
        {
            var delivery = deliverys.FirstOrDefault(d => d.Id == entrega.DeliveryId);
            if (delivery != null)
            {
                // Mantener todos los datos del delivery y solo actualizar el estado
                delivery.Estado = "Disponible";
                await DeliveryService.ActualizarAsync(delivery);
            }
        }

        await JS.InvokeVoidAsync("blazorHelpers.showToast", "success", "Estado actualizado",
            $"Entrega #{entrega.Id} ahora está en estado: {entrega.EstadoEntrega}");

        // ✅ Actualizar localStorage con nuevo estado
        var actualizadas = await EntregaService.ObtenerTodasAsync();
        await JS.InvokeVoidAsync("localStorage.setItem", "entregas", JsonSerializer.Serialize(actualizadas));
    }

    private async Task EliminarEntrega(int id)
    {
        try
        {
            var confirmed = await JS.InvokeAsync<bool>("blazorHelpers.confirmarDelivery",
                "¿Estás seguro de eliminar esta entrega?");
            if (!confirmed) return;

            var entrega = entregas.FirstOrDefault(e => e.Id == id);
            if (entrega != null && entrega.DeliveryId > 0)
            {
                var delivery = deliverys.FirstOrDefault(d => d.Id == entrega.DeliveryId);
                if (delivery != null)
                {
                    delivery.Estado = "Disponible";
                    await DeliveryService.ActualizarAsync(delivery);
                }
            }

            await EntregaService.EliminarAsync(id);
            await CargarDatos();

            await JS.InvokeVoidAsync("blazorHelpers.showToast", "success", "Éxito",
                "Entrega eliminada correctamente");

            // ✅ Guardar nuevo listado en localStorage
            var nuevas = await EntregaService.ObtenerTodasAsync();
            await JS.InvokeVoidAsync("localStorage.setItem", "entregas", JsonSerializer.Serialize(nuevas));
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("blazorHelpers.showToast", "danger", "Error",
                $"Error al eliminar: {ex.Message}");
        }
    }

    private void ShowProductos(List<ProductoEntrega> productos)
    {
        productosModal = productos;
        mostrarProductos = true;
    }
}
