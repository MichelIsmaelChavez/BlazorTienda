@page "/ver-perfil"
@using BlazorTienda.Models
@using BlazorTienda.Services
@inject SesionService SesionService
@inject UsuarioService UsuarioService

@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <h2 class="text-center text-primary mb-4">
                <i class="bi bi-person-circle me-2"></i>Mi Perfil
            </h2>

            @if (usuario == null)
            {
                <div class="alert alert-warning text-center shadow-sm">
                    No hay un usuario autenticado.
                </div>
            }
            else if (!modoEdicion)
            {
                <!-- Vista -->
                <div class="card shadow-lg p-4">
                    <div class="text-center mb-3">
                        @if (!string.IsNullOrWhiteSpace(usuario.FotoRostro) && usuario.FotoRostro.StartsWith("data:image"))
                        {
                            <img src="@usuario.FotoRostro" class="rounded-circle border border-3 border-primary shadow-sm" style="width:150px; height:150px; object-fit:cover;" />
                        }
                        else
                        {
                            <div class="rounded-circle bg-light d-flex align-items-center justify-content-center border border-secondary shadow-sm" style="width:150px; height:150px;">
                                <i class="bi bi-person-circle fs-1 text-muted"></i>
                            </div>
                        }
                    </div>

                    <ul class="list-group list-group-flush mb-4">
                        <li class="list-group-item"><strong>👤 Nombre:</strong> @usuario.Nombre</li>
                        <li class="list-group-item"><strong>📧 Correo:</strong> @usuario.Correo</li>
                        <li class="list-group-item"><strong>🔐 Rol:</strong> @usuario.Rol</li>
                        <li class="list-group-item"><strong>📍 Ubicación:</strong> (@usuario.Latitud, @usuario.Longitud)</li>
                    </ul>

                    <div class="text-center">
                        <button class="btn btn-outline-primary w-100" @onclick="() => modoEdicion = true">
                            <i class="bi bi-pencil-square me-1"></i>Editar Perfil
                        </button>
                    </div>
                </div>
            }
            else
            {
                <!-- Edición -->
                <EditForm Model="@usuario" OnValidSubmit="GuardarCambios" class="card shadow-lg p-4">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3 form-floating">
                        <InputText class="form-control" id="nombre" @bind-Value="usuario.Nombre" />
                        <label for="nombre">Nombre</label>
                    </div>

                    <div class="mb-3 form-floating">
                        <InputText class="form-control" id="correo" @bind-Value="usuario.Correo" />
                        <label for="correo">Correo</label>
                    </div>

                    <div class="mb-4">
                        <label class="form-label">📍 Seleccionar nueva ubicación:</label>
                        <div id="mapaPerfil" style="height: 250px; border-radius: 8px; border: 1px solid #ccc;"></div>
                        <div class="mt-2 text-center">
                            <small class="text-muted">
                                Latitud: @usuario.Latitud.ToString("0.0000") |
                                Longitud: @usuario.Longitud.ToString("0.0000")
                            </small>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">📸 Nueva Foto:</label>
                        <div class="d-flex align-items-center gap-3">
                            <video id="videoPerfil" width="150" height="120" autoplay playsinline class="border rounded shadow-sm"></video>
                            <canvas id="canvasPerfil" width="150" height="120" style="display:none;"></canvas>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-primary mt-2" @onclick="CapturarFoto">
                            <i class="bi bi-camera me-1"></i>Capturar Foto
                        </button>

                        @if (!string.IsNullOrEmpty(usuario.FotoRostro))
                        {
                            <div class="mt-3">
                                <img src="@usuario.FotoRostro" class="img-thumbnail border shadow-sm" width="100" />
                            </div>
                        }
                    </div>

                    <div class="d-flex gap-3 mt-4">
                        <button type="submit" class="btn btn-success w-100">
                            <i class="bi bi-check-circle me-1"></i>Guardar
                        </button>
                        <button type="button" class="btn btn-secondary w-100" @onclick="CancelarEdicion">
                            <i class="bi bi-x-circle me-1"></i>Cancelar
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    Usuario? usuario;
    bool modoEdicion = false;
    bool mapaInicializado = false;

    protected override async Task OnInitializedAsync()
    {
        usuario = SesionService.UsuarioActual;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (modoEdicion && !mapaInicializado && usuario != null)
        {
            var dotnetRef = DotNetObjectReference.Create(this);

            // Verificamos si el usuario tiene ubicación válida, caso contrario usar Santa Cruz
            double lat = (usuario.Latitud != 0) ? usuario.Latitud : -17.7833;
            double lng = (usuario.Longitud != 0) ? usuario.Longitud : -63.1833;

            await JS.InvokeVoidAsync("initMapa", lat, lng, dotnetRef);
            await JS.InvokeVoidAsync("iniciarCamaraPerfil");
            mapaInicializado = true;
        }
    }


    private async Task CapturarFoto()
    {
        var base64 = await JS.InvokeAsync<string>("capturarFotoPerfil");
        if (!string.IsNullOrWhiteSpace(base64))
        {
            usuario!.FotoRostro = base64;
            await LocalStorage.SetItemAsync("usuarioActual", usuario);
            StateHasChanged();
        }
    }

    private async Task GuardarCambios()
    {
        await JS.InvokeVoidAsync("detenerCamaraPerfil");

        if (SesionService.UsuarioActual != null && usuario != null)
        {
            SesionService.UsuarioActual.Nombre = usuario.Nombre;
            SesionService.UsuarioActual.Correo = usuario.Correo;
            SesionService.UsuarioActual.FotoRostro = usuario.FotoRostro;
            SesionService.UsuarioActual.Latitud = usuario.Latitud;
            SesionService.UsuarioActual.Longitud = usuario.Longitud;

            // ✅ GUARDAR cambios en lista general
            await UsuarioService.ActualizarUsuarioAsync(SesionService.UsuarioActual);

            // ✅ GUARDAR en sesión actual
            await SesionService.GuardarUsuarioActualAsync();
        }

        modoEdicion = false;
        mapaInicializado = false;

        await JS.InvokeVoidAsync("Swal.fire", new
        {
            icon = "success",
            title = "Perfil actualizado",
            text = "Se guardaron los cambios correctamente."
        });

        StateHasChanged();
    }


    private async void CancelarEdicion()
    {
        await JS.InvokeVoidAsync("detenerCamaraPerfil");
        modoEdicion = false;
        mapaInicializado = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void EstablecerUbicacion(double lat, double lng)
    {
        if (usuario != null)
        {
            usuario.Latitud = lat;  
            usuario.Longitud = lng;
            StateHasChanged();
        }
    }
}
