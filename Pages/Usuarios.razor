@page "/usuarios"
@using BlazorTienda.Models
@using BlazorTienda.Services
@inject UsuarioService UsuarioService
@inject SesionService SesionService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container-fluid px-4 py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary fw-bold mb-0">
            <i class="bi bi-people me-2"></i> Gestión de Usuarios
        </h2>
        <div class="badge bg-primary rounded-pill fs-6">
            @(usuariosFiltrados.Count) usuarios
        </div>
    </div>

    @if (mostrarToast)
    {
        <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
            <div class="toast show text-white bg-@tipoToast border-0 fade show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body d-flex align-items-center">
                        <i class="bi @(tipoToast == "success" ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                        @mensajeToast
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => mostrarToast = false" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-lg-5 mb-4">
            <div class="card border-0 shadow-sm rounded-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0">
                        <i class="bi @(enEdicion ? "bi-pencil" : "bi-person-plus") me-2"></i>
                        @(enEdicion ? "Editar Usuario" : "Agregar Nuevo Usuario")
                    </h5>
                </div>
                <div class="card-body">
                    <EditForm Model="nuevoUsuario" OnValidSubmit="GuardarUsuario">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger small" />

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Nombre completo</label>
                            <InputText class="form-control" @bind-Value="nuevoUsuario.Nombre"
                                       placeholder="Ej: Juan Pérez" />
                            <ValidationMessage For="@(() => nuevoUsuario.Nombre)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Correo electrónico</label>
                            <InputText class="form-control" @bind-Value="nuevoUsuario.Correo" type="email"
                                       placeholder="Ej: ejemplo@gmail.com" />
                            <ValidationMessage For="@(() => nuevoUsuario.Correo)" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Contraseña</label>
                            <InputText class="form-control" @bind-Value="nuevoUsuario.Contrasena" type="password"
                                       placeholder="••••••••" />
                            <ValidationMessage For="@(() => nuevoUsuario.Contrasena)" class="text-danger small" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label fw-semibold">Rol</label>
                            <InputSelect class="form-select" @bind-Value="nuevoUsuario.Rol">
                                <option disabled value="">-- Selecciona un rol --</option>
                                <option value="Gerente general">Gerente general</option>
                                <option value="Supervisor general">Supervisor general</option>
                                <option value="Encargado de almacén">Encargado de almacén</option>
                                <option value="Encargado de entregas">Encargado de entregas</option>
                                <option value="Ayudante de almacén">Ayudante de almacén</option>
                                <option value="Personal de limpieza">Personal de limpieza</option>
                                <option value="Administrador">Administrador</option>
                                <option value="Delivery">Delivery</option>
                                <option value="Cliente">Cliente</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => nuevoUsuario.Rol)" class="text-danger small" />
                        </div>

                        <div class="d-flex gap-2">
                            <button class="btn btn-primary px-4 py-2 flex-grow-1" type="submit">
                                <i class="bi @(enEdicion ? "bi-arrow-repeat" : "bi-save") me-2"></i>
                                @textoBoton
                            </button>
                            @if (enEdicion)
                            {
                                <button class="btn btn-outline-secondary px-4 py-2" type="button"
                                        @onclick="CancelarEdicion">
                                    <i class="bi bi-x-lg me-2"></i> Cancelar
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-lg-7">
            <div class="card border-0 shadow-sm rounded-4">
                <div class="card-header bg-white border-0 py-3 d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-list-ul me-2"></i> Lista de Usuarios
                    </h5>
                    <div class="search-box">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control border-start-0"
                                   placeholder="Buscar usuarios..."
                                   @bind="textoBusqueda" @bind:event="oninput" />
                            @if (!string.IsNullOrEmpty(textoBusqueda))
                            {
                                <button class="btn btn-outline-secondary" type="button"
                                        @onclick="LimpiarBusqueda">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    @if (UsuarioService.Usuarios.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead style="background-color: #007bff; color: white;">
                                    <tr>
                                        <th>Nombre</th>
                                        <th>Correo</th>
                                        <th>Rol</th>
                                        <th style="width: 120px;">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var usuario in usuariosFiltrados)
                                    {
                                        <tr class="align-middle">
                                            <td>
                                                <div class="fw-semibold">@usuario.Nombre</div>
                                            </td>
                                            <td>@usuario.Correo</td>
                                            <td>
                                                <span class="badge @GetBadgeClass(usuario.Rol)">
                                                    @usuario.Rol
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            @onclick="() => EditarUsuario(usuario)"
                                                            title="Editar">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => ConfirmarEliminar(usuario.Id)"
                                                            title="Eliminar">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
                            <h5 class="mt-3">No hay usuarios registrados</h5>
                            <p class="text-muted">Agrega tu primer usuario usando el formulario</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Usuario nuevoUsuario = new Usuario();
    private bool enEdicion = false;
    private string textoBoton => enEdicion ? "Actualizar" : "Guardar";
    private bool mostrarToast = false;
    private string tipoToast = "success";
    private string mensajeToast = string.Empty;
    private string textoBusqueda = string.Empty;

    private List<Usuario> usuariosFiltrados => UsuarioService.Usuarios
        .Where(u => string.IsNullOrEmpty(textoBusqueda) ||
                    u.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                    u.Correo.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                    u.Rol.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase))
        .ToList();

    protected override void OnInitialized()
    {
        if (!SesionService.TieneAccesoAdmin())
        {
            Navigation.NavigateTo("/login");
        }
    }

    private string GetBadgeClass(string rol)
    {
        return rol switch
        {
            "Administrador" => "bg-danger",
            "Gerente general" => "bg-primary",
            "Supervisor general" => "bg-info",
            "Encargado de almacén" => "bg-warning text-dark",
            "Encargado de entregas" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    private void GuardarUsuario()
    {
        if (enEdicion)
        {
            UsuarioService.EditarUsuario(nuevoUsuario);
            MostrarToast("Usuario actualizado correctamente", "success");
            enEdicion = false;
        }
        else
        {
            UsuarioService.AgregarUsuarioAsync(nuevoUsuario);
            MostrarToast("Usuario agregado correctamente", "success");
        }

        LimpiarFormulario();
    }

    private void EditarUsuario(Usuario usuario)
    {
        nuevoUsuario = new Usuario
            {
                Id = usuario.Id,
                Nombre = usuario.Nombre,
                Correo = usuario.Correo,
                Contrasena = usuario.Contrasena,
                Rol = usuario.Rol
            };
        enEdicion = true;
    }

    private void CancelarEdicion()
    {
        LimpiarFormulario();
    }

    private void LimpiarFormulario()
    {
        nuevoUsuario = new Usuario();
        enEdicion = false;
    }

    private void LimpiarBusqueda()
    {
        textoBusqueda = string.Empty;
    }

    private async Task ConfirmarEliminar(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este usuario?");
        if (confirmar)
        {
            UsuarioService.EliminarUsuario(id);
            MostrarToast("Usuario eliminado correctamente", "danger");
        }
    }

    private void MostrarToast(string mensaje, string tipo)
    {
        mensajeToast = mensaje;
        tipoToast = tipo;
        mostrarToast = true;

        var timer = new System.Timers.Timer(3000);
        timer.Elapsed += (s, e) =>
        {
            mostrarToast = false;
            InvokeAsync(StateHasChanged);
            timer.Dispose();
        };
        timer.Start();
    }
}
