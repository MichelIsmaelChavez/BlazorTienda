@page "/tienda"
@using BlazorTienda.Models
@using BlazorTienda.Services
@inject ProductoService ProductoService
@inject CarritoService CarritoService
@inject CategoriaService CategoriaService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@implements IDisposable

<!-- Carrusel de Promociones -->
<div id="promoCarousel" class="carousel slide shadow rounded-4 overflow-hidden" data-bs-ride="carousel" style="margin-top: 0; padding-top: 0;">
    <div class="carousel-inner">
        <div class="carousel-item active">
            <img src="images/promos/promo1.jpg" class="d-block w-100" style="height: 400px; object-fit: cover;" alt="Promo 1">
            <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 p-3 rounded">
                <h2 class="text-white fw-bold">¡Ofertas Imperdibles!</h2>
                <p class="fs-5">Hasta 50% de descuento en electrónicos</p>
                <button class="btn btn-warning fw-bold">Ver ofertas</button>
            </div>
        </div>
        <div class="carousel-item">
            <img src="images/promos/promo2.jpg" class="d-block w-100" style="height: 400px; object-fit: cover;" alt="Promo 2">
            <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 p-3 rounded">
                <h2 class="text-white fw-bold">Nuevos Lanzamientos</h2>
                <p class="fs-5">Los productos más recientes ya disponibles</p>
                <button class="btn btn-primary fw-bold">Descubrir</button>
            </div>
        </div>
        <div class="carousel-item">
            <img src="images/promos/promo3.jpg" class="d-block w-100" style="height: 400px; object-fit: cover;" alt="Promo 3">
            <div class="carousel-caption d-none d-md-block bg-dark bg-opacity-50 p-3 rounded">
                <h2 class="text-white fw-bold">¡Descuentos Increíbles!</h2>
                <p class="fs-5">Aprovecha antes de que terminen</p>
                <button class="btn btn-success fw-bold">Comprar ahora</button>
            </div>
        </div>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#promoCarousel" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Anterior</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#promoCarousel" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Siguiente</span>
    </button>
</div>

<!-- Sección de categorías -->
<div class="container mt-4">
    <div class="row g-3">
        @foreach (var cat in CategoriaService.Categorias.Take(4))
        {
            <div class="col-6 col-md-3">
                <div class="card h-100 border-0 shadow-sm hover-effect">
                    <img src="@($"/img/{cat.Nombre.ToLower()}.jpg")" class="card-img-top" style="height: 150px; object-fit: cover;" alt="@cat.Nombre">

                    <div class="card-body text-center">
                        <h5 class="card-title">@cat.Nombre</h5>
                        <a href="#" @onclick="() => FiltrarPorCategoria(cat.Nombre)" class="stretched-link"></a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Lo más vendido -->
<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold">Lo más vendido</h2>
        <a href="#" class="btn btn-link">Ver todo</a>
    </div>
    
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-3">
        @foreach (var producto in ProductosMasVendidos.Take(5))
        {
            <div class="col">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="position-relative" style="height: 180px;">
                        <img src="@producto.ImagenUrl" class="card-img-top h-100 w-100 object-fit-contain p-2" />
                        @if (producto.Stock == 0)
                        {
                            <div class="position-absolute top-0 start-0 w-100 bg-danger text-white text-center small py-1">AGOTADO</div>
                        }
                        @if (producto.EnOferta)
                        {
                            <span class="position-absolute top-0 start-0 bg-danger text-white small px-2 py-1">OFERTA</span>
                        }
                    </div>
                    <div class="card-body">
                        <h6 class="card-title">@producto.Nombre</h6>
                        <div class="text-warning small">
                            @for (int i = 0; i < 5; i++)
                            {
                                <i class="bi @(i < producto.Rating ? "bi-star-fill" : "bi-star")"></i>
                            }
                            <span class="text-muted small">(@producto.NumeroOpiniones)</span>
                        </div>
                        <div class="mt-2">
                            @if (producto.EnOferta)
                            {
                                <span class="text-danger fw-bold">Bs. @producto.PrecioOferta.ToString("N2")</span>
                                <span class="text-muted text-decoration-line-through small ms-2">Bs. @producto.Precio.ToString("N2")</span>
                            }
                            else
                            {
                                <span class="text-success fw-bold">Bs. @producto.Precio.ToString("N2")</span>
                            }
                        </div>
                        <button class="btn btn-sm @(producto.Stock > 0 ? "btn-outline-primary" : "btn-secondary") w-100 mt-2"
                                @onclick="() => AgregarAlCarrito(producto)"
                                disabled="@(producto.Stock == 0)">
                            <i class="bi bi-cart-plus me-1"></i>
                            @(producto.Stock == 0 ? "Agotado" : "Añadir")
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Deseados en videojuegos -->
<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold">Deseados en videojuegos</h2>
        <a href="#" class="btn btn-link">Ver todo</a>
    </div>
    
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-3">
        @foreach (var producto in ProductosDeseadosVideojuegos.Take(5))
        {
            <div class="col">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="position-relative" style="height: 180px;">
                        <img src="@producto.ImagenUrl" class="card-img-top h-100 w-100 object-fit-contain p-2" />
                        <button class="position-absolute top-0 end-0 btn btn-sm btn-light rounded-circle m-2" 
                                @onclick="() => ToggleFavorito(producto)">
                            <i class="bi @(producto.EsFavorito ? "bi-heart-fill text-danger" : "bi-heart")"></i>
                        </button>
                        @if (producto.Stock == 0)
                        {
                            <div class="position-absolute top-0 start-0 w-100 bg-danger text-white text-center small py-1">AGOTADO</div>
                        }
                    </div>
                    <div class="card-body">
                        <h6 class="card-title">@producto.Nombre</h6>
                        <div class="text-warning small">
                            @for (int i = 0; i < 5; i++)
                            {
                                <i class="bi @(i < producto.Rating ? "bi-star-fill" : "bi-star")"></i>
                            }
                        </div>
                        <div class="mt-2">
                            <span class="text-success fw-bold">Bs. @producto.Precio.ToString("N2")</span>
                        </div>
                        <button class="btn btn-sm @(producto.Stock > 0 ? "btn-outline-primary" : "btn-secondary") w-100 mt-2"
                                @onclick="() => AgregarAlCarrito(producto)"
                                disabled="@(producto.Stock == 0)">
                            <i class="bi bi-cart-plus me-1"></i>
                            @(producto.Stock == 0 ? "Agotado" : "Añadir")
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Productos destacados -->
<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold">Todos los productos</h2>
        <div class="d-flex gap-3">
            <div class="input-group" style="width: 200px;">
                <span class="input-group-text bg-white">
                    <i class="bi bi-funnel"></i>
                </span>
                <select class="form-select" @bind="categoriaSeleccionada">
                    <option value="">Todas las categorías</option>
                    @foreach (var cat in CategoriaService.Categorias)
                    {
                        <option value="@cat.Nombre">@cat.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group" style="width: 200px;">
                <span class="input-group-text bg-white">
                    <i class="bi bi-sort-down"></i>
                </span>
                <select class="form-select" @bind="ordenSeleccionado">
                    <option value="nombre-asc">Nombre (A-Z)</option>
                    <option value="nombre-desc">Nombre (Z-A)</option>
                    <option value="precio-asc">Precio (Menor a Mayor)</option>
                    <option value="precio-desc">Precio (Mayor a Menor)</option>
                </select>
            </div>
        </div>
    </div>
    
    @if (ProductosFiltradosYOrdenados.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
            @foreach (var producto in ProductosFiltradosYOrdenados)
            {
                <div class="col">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="position-relative" style="height: 200px;">
                            <img src="@producto.ImagenUrl" class="card-img-top h-100 w-100 object-fit-contain p-3" />
                            <div class="position-absolute top-0 end-0 d-flex flex-column">
                                <button class="btn btn-sm btn-light rounded-circle m-1" @onclick="() => ToggleFavorito(producto)">
                                    <i class="bi @(producto.EsFavorito ? "bi-heart-fill text-danger" : "bi-heart")"></i>
                                </button>
                                @if (producto.EnOferta)
                                {
                                    <span class="badge bg-danger m-1">-@((int)(100 - (producto.PrecioOferta * 100 / producto.Precio)))%</span>
                                }
                            </div>
                            @if (producto.Stock == 0)
                            {
                                <div class="position-absolute top-0 start-0 w-100 bg-danger text-white text-center small py-1">AGOTADO</div>
                            }
                        </div>
                        <div class="card-body">
                            <span class="badge bg-primary bg-opacity-10 text-primary mb-2">@producto.Categoria</span>
                            <h5 class="card-title">@producto.Nombre</h5>
                            <div class="text-warning small mb-2">
                                @for (int i = 0; i < 5; i++)
                                {
                                    <i class="bi @(i < producto.Rating ? "bi-star-fill" : "bi-star")"></i>
                                }
                                <span class="text-muted small">(@producto.NumeroOpiniones)</span>
                            </div>
                            
                            @if (producto.EnOferta)
                            {
                                <div class="d-flex align-items-center">
                                    <span class="text-danger fw-bold fs-5">Bs. @producto.PrecioOferta.ToString("N2")</span>
                                    <span class="text-muted text-decoration-line-through small ms-2">Bs. @producto.Precio.ToString("N2")</span>
                                </div>
                                <div class="text-success small">Ahorras Bs. @((producto.Precio - producto.PrecioOferta).ToString("N2"))</div>
                            }
                            else
                            {
                                <div class="text-success fw-bold fs-5">Bs. @producto.Precio.ToString("N2")</div>
                            }
                            
                            <div class="mt-3">
                                <button class="btn @(producto.Stock > 0 ? "btn-primary" : "btn-secondary") w-100"
                                        @onclick="() => AgregarAlCarrito(producto)"
                                        disabled="@(producto.Stock == 0)">
                                    <i class="bi bi-cart-plus me-1"></i>
                                    @(producto.Stock == 0 ? "Agotado" : "Añadir al carrito")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="py-5">
                <i class="bi bi-search display-1 text-muted"></i>
                <h4 class="mt-3">No encontramos productos</h4>
                <p class="text-muted">Intenta con otros términos de búsqueda o cambia los filtros</p>
                <button class="btn btn-primary mt-3" @onclick="LimpiarFiltros">
                    <i class="bi bi-arrow-counterclockwise me-1"></i> Limpiar filtros
                </button>
            </div>
        </div>
    }
</div>

<!-- Banner de envío -->
<div class="container-fluid bg-light py-4 mt-5">
    <div class="container">
        <div class="row text-center">
            <div class="col-md-4">
                <i class="bi bi-truck fs-1 text-primary"></i>
                <h5>Envío rápido</h5>
                <p class="text-muted">Entrega en 24-48 horas</p>
            </div>
            <div class="col-md-4">
                <i class="bi bi-arrow-repeat fs-1 text-primary"></i>
                <h5>Devoluciones fáciles</h5>
                <p class="text-muted">30 días para devolver</p>
            </div>
            <div class="col-md-4">
                <i class="bi bi-shield-check fs-1 text-primary"></i>
                <h5>Compra segura</h5>
                <p class="text-muted">Protegemos tus datos</p>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notifications -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 9999">
    @if (!string.IsNullOrEmpty(MensajeToast))
    {
        <div class="toast show align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @MensajeToast
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="CerrarToast" aria-label="Cerrar"></button>
            </div>
        </div>
    }
</div>

<!-- Botón flotante de chat -->
<button class="chat-button" @onclick="ToggleChat">
    <span style="font-size: 24px;">💬</span>
</button>

<!-- Chat Popup -->
<div class="chat-popup" style="@ChatStyle">
    <div class="chat-header">
        <img src="images/pikachu.png" alt="Logo" style="height: 40px;" class="me-2">
        <div style="background-color: #007bff; padding: 10px;" class="fw-bold fs-4 text-white">
            Blazor<span class="text-warning">Ecommerce</span>
        </div>
    </div>

    <div class="chat-body">
        <div class="message bot">¡Te damos la bienvenida a ClickShop!</div>
        <div class="message bot">¿Cómo podemos ayudarte?</div>

        @foreach (var msg in chatMessages)
        {
            <div class="message @(msg.IsBot ? "bot" : "user")">@msg.Texto</div>
        }

        <div class="options">
            @foreach (var opcion in opciones)
            {
                <button class="option-button" @onclick="() => SeleccionarOpcion(opcion)">
                    @opcion
                </button>
            }
        </div>
    </div>
</div>

@code {
    private string MensajeToast;
    private string categoriaSeleccionada = "";
    private string ordenSeleccionado = "nombre-asc";
    private bool isChatOpen = false;
    private List<Mensaje> chatMessages = new();
    private IDisposable? locationChangedHandler;

    // Opciones del chat
    private List<string> opciones = new()
    {
        "Direcciones", "Horarios", "Requisitos para compra",
        "Paga o consulta tus cuotas", "Iniciar solicitud de cuotas",
        "Ayuda para comprar", "Otro"
    };

    // Respuestas del chat
    private Dictionary<string, string> respuestas = new()
    {
        { "Direcciones", "Nuestra tienda está en Av. Principal #123, Ciudad." },
        { "Horarios", "Abrimos de lunes a viernes de 9am a 6pm." },
        { "Requisitos para compra", "Solo necesitas tu cédula y una prueba de domicilio." },
        { "Paga o consulta tus cuotas", "Puedes hacerlo en línea o en cualquiera de nuestras tiendas." },
        { "Iniciar solicitud de cuotas", "Llena nuestro formulario de cuotas para solicitar." },
        { "Ayuda para comprar", "Nuestro equipo te asistirá para encontrar el mejor producto." },
        { "Otro", "Por favor, describe tu solicitud y uno de nuestros agentes te asistirá." }
    };

    protected override async Task OnInitializedAsync()
    {
        await ProductoService.InicializarProductosAsync(); // ✅ Esto carga los productos del localStorage o por defecto

        locationChangedHandler = NavigationManager.RegisterLocationChangingHandler(OnLocationChanged);
        ActualizarParametrosBusqueda();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        locationChangedHandler = NavigationManager.RegisterLocationChangingHandler(OnLocationChanged);
        ActualizarParametrosBusqueda();
    }

    private async ValueTask OnLocationChanged(LocationChangingContext context)
    {
        await Task.Yield();
        ActualizarParametrosBusqueda();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ActualizarParametrosBusqueda();
    }

    private void ActualizarParametrosBusqueda()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("busqueda", out var busquedaParam))
        {
            ProductoService.TextoBusqueda = busquedaParam;
        }

        if (query.TryGetValue("categoria", out var categoriaParam))
        {
            categoriaSeleccionada = categoriaParam;
        }
        else
        {
            categoriaSeleccionada = "";
        }
    }

    public void Dispose()
    {
        locationChangedHandler?.Dispose();
    }

    // Obtener productos más vendidos
    private IEnumerable<Producto> ProductosMasVendidos => 
        ProductoService.ProductosFiltrados(categoriaSeleccionada)
            .OrderByDescending(p => p.Ventas)
            .ThenByDescending(p => p.Rating);
    
    // Obtener productos deseados en videojuegos
    private IEnumerable<Producto> ProductosDeseadosVideojuegos => 
        ProductoService.ProductosFiltrados("Videojuegos")
            .OrderByDescending(p => p.EsFavorito)
            .ThenByDescending(p => p.Rating);
    
    private IEnumerable<Producto> ProductosFiltradosYOrdenados =>
        ordenSeleccionado switch
        {
            "nombre-asc" => ProductoService.ProductosFiltrados(categoriaSeleccionada).OrderBy(p => p.Nombre),
            "nombre-desc" => ProductoService.ProductosFiltrados(categoriaSeleccionada).OrderByDescending(p => p.Nombre),
            "precio-asc" => ProductoService.ProductosFiltrados(categoriaSeleccionada).OrderBy(p => p.EnOferta ? p.PrecioOferta : p.Precio),
            "precio-desc" => ProductoService.ProductosFiltrados(categoriaSeleccionada).OrderByDescending(p => p.EnOferta ? p.PrecioOferta : p.Precio),
            _ => ProductoService.ProductosFiltrados(categoriaSeleccionada).OrderBy(p => p.Nombre)
        };

    private void FiltrarPorCategoria(string categoria)
    {
        categoriaSeleccionada = categoria;
    }

    private void AgregarAlCarrito(Producto producto)
    {
        if (producto.Stock > 0)
        {
            CarritoService.AgregarAlCarritoAsync(producto);
            producto.Stock--;
            MostrarToast($"✅ {producto.Nombre} agregado al carrito");
        }
    }

    private void ToggleFavorito(Producto producto)
    {
        producto.EsFavorito = !producto.EsFavorito;
        MostrarToast(producto.EsFavorito ? "❤️ Añadido a favoritos" : "💔 Eliminado de favoritos");
    }

    private void LimpiarFiltros()
    {
        categoriaSeleccionada = "";
        ordenSeleccionado = "nombre-asc";
        ProductoService.TextoBusqueda = "";
        NavigationManager.NavigateTo("/tienda");
    }

    private void MostrarToast(string mensaje)
    {
        MensajeToast = mensaje;
        var timer = new System.Timers.Timer(3000);
        timer.Elapsed += (s, e) =>
        {
            MensajeToast = null;
            InvokeAsync(StateHasChanged);
            timer.Dispose();
        };
        timer.Start();
        StateHasChanged();
    }

    private void CerrarToast()
    {
        MensajeToast = null;
    }

    // Funciones del chat
    private void ToggleChat()
    {
        isChatOpen = !isChatOpen;
    }

    private void SeleccionarOpcion(string opcion)
    {
        chatMessages.Add(new Mensaje { Texto = opcion, IsBot = false });
        if (respuestas.ContainsKey(opcion))
        {
            chatMessages.Add(new Mensaje { Texto = respuestas[opcion], IsBot = true });
        }
    }

    private string ChatStyle => isChatOpen ? "opacity:1; transform:translateY(0);" : "opacity:0; transform:translateY(20px); pointer-events:none;";

    private class Mensaje
    {
        public string Texto { get; set; } = "";
        public bool IsBot { get; set; }
    }

    private string LimpiarNombre(string nombre)
    {
        return nombre.ToLower()
                     .Replace("á", "a")
                     .Replace("é", "e")
                     .Replace("í", "i")
                     .Replace("ó", "o")
                     .Replace("ú", "u")
                     .Replace("ñ", "n");
    }
}

<style>
    /* Efecto hover para las tarjetas */
    .hover-effect {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .hover-effect:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
    }

    /* Estilo para el chat */
    .chat-button {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: #007bff;
        color: white;
        border: none;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        cursor: pointer;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-popup {
        position: fixed;
        bottom: 100px;
        right: 30px;
        width: 350px;
        max-height: 500px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
        z-index: 1000;
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        padding: 10px 15px;
        background-color: #f8f9fa;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        display: flex;
        align-items: center;
        border-bottom: 1px solid #eee;
    }

    .chat-body {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .message {
        max-width: 80%;
        padding: 8px 12px;
        border-radius: 18px;
        margin-bottom: 5px;
    }

    .message.bot {
        align-self: flex-start;
        background-color: #f1f1f1;
        color: #333;
    }

    .message.user {
        align-self: flex-end;
        background-color: #007bff;
        color: white;
    }

    .options {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }

    .option-button {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 20px;
        padding: 5px 15px;
        margin: 5px;
        transition: all 0.2s;
        font-size: 0.8rem;
    }

    .option-button:hover {
        background-color: #e9ecef;
        border-color: #ced4da;
    }

    /* Ajustes para imágenes */
    .object-fit-contain {
        object-fit: contain;
    }
</style>

<script>
    var myCarousel = document.querySelector('#promoCarousel');
    var carousel = new bootstrap.Carousel(myCarousel, {
        interval: 3000,
        ride: 'carousel'
    });
</script>
