@page "/categorias"
@using BlazorTienda.Models
@using BlazorTienda.Services
@inject CategoriaService CategoriaService
@inject SesionService SesionService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="container-fluid px-4 py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary fw-bold mb-0">
            <i class="bi bi-tags me-2"></i> Gestión de Categorías
        </h2>
        <div class="badge bg-primary rounded-pill fs-6">
            @CategoriaService.Categorias.Count categorías
        </div>
    </div>

    @if (mostrarToast)
    {
        <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
            <div class="toast show text-white bg-@tipoToast border-0 fade show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body d-flex align-items-center">
                        <i class="bi @(tipoToast == "success" ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                        @mensajeToast
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => mostrarToast = false" aria-label="Close"></button>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col-lg-5 mb-4">
            <div class="card border-0 shadow-sm rounded-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-plus-circle me-2"></i> Agregar Nueva Categoría
                    </h5>
                </div>
                <div class="card-body">
                    <EditForm Model="nuevaCategoria" OnValidSubmit="Agregar">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger small" />

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Nombre de la categoría</label>
                            <InputText class="form-control" @bind-Value="nuevaCategoria.Nombre"
                                       placeholder="Ej: Juguetes, Electrónica, Ropa" />
                            <ValidationMessage For="@(() => nuevaCategoria.Nombre)" class="text-danger small" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-save me-2"></i> Guardar Categoría
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-lg-7">
            <div class="card border-0 shadow-sm rounded-4">
                <div class="card-header bg-white border-0 py-3">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-list-ul me-2"></i> Lista de Categorías
                    </h5>
                </div>
                <div class="card-body p-0">
                    @if (CategoriaService.Categorias.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var cat in CategoriaService.Categorias)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <i class="bi bi-tag-fill text-primary me-2"></i>
                                        <span class="fw-semibold">@cat.Nombre</span>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-outline-danger"
                                                @onclick="() => ConfirmarEliminar(cat.Id)"
                                                title="Eliminar categoría">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-tags text-muted" style="font-size: 3rem;"></i>
                            <h5 class="mt-3">No hay categorías registradas</h5>
                            <p class="text-muted">Agrega tu primera categoría usando el formulario</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Categoria nuevaCategoria = new Categoria();
    private bool mostrarToast = false;
    private string tipoToast = "success";
    private string mensajeToast = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!SesionService.TieneAccesoAdmin())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Cargar categorías desde localStorage
        var categoriasJson = await JS.InvokeAsync<string>("localStorage.getItem", "categorias");
        if (!string.IsNullOrWhiteSpace(categoriasJson))
        {
            try
            {
                var categorias = System.Text.Json.JsonSerializer.Deserialize<List<Categoria>>(categoriasJson);
                if (categorias is not null && categorias.Any())
                {
                    CategoriaService.Categorias = categorias;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error deserializando categorías: " + ex.Message);
            }
        }
    }

    private async Task Agregar()
    {
        CategoriaService.AgregarCategoria(nuevaCategoria);
        nuevaCategoria = new Categoria();
        await GuardarCategoriasEnLocalStorage();
        MostrarToast("Categoría agregada correctamente", "success");
    }

    private async Task ConfirmarEliminar(int id)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar esta categoría?");
        if (confirmar)
        {
            CategoriaService.EliminarCategoria(id);
            await GuardarCategoriasEnLocalStorage();
            MostrarToast("Categoría eliminada correctamente", "danger");
        }
    }

    private async Task GuardarCategoriasEnLocalStorage()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(CategoriaService.Categorias);
        await JS.InvokeVoidAsync("localStorage.setItem", "categorias", json);
    }

    private void MostrarToast(string mensaje, string tipo)
    {
        mensajeToast = mensaje;
        tipoToast = tipo;
        mostrarToast = true;

        var timer = new System.Timers.Timer(3000);
        timer.Elapsed += (s, e) =>
        {
            mostrarToast = false;
            InvokeAsync(StateHasChanged);
            timer.Dispose();
        };
        timer.Start();
    }
}

